#!/usr/bin/env fish

# Use the first argument as the output file, or default to commands.sh
set outfile $argv[1] commands.fish ; set outfile $outfile[1]
if not test -e $outfile
    echo '#!/usr/bin/env fish' >> $outfile
end
chmod +x $outfile

# Get the absolute path of the output file
set outfile (realpath "$outfile")

# Export the output file path so the new shell can see it
set -gx OUT_FILE "$outfile"

# The initialization command that sets up logging and a custom nvim function
set init_cmd '
# Custom nvim function that creates patches for single-file edits
function v -w "nvim"
    nvim $argv
end

function nvim
    if test (count $argv) -ne 1
        command nvim $argv
        return
    end

    set orig_file $argv[1]
    set temp_file (mktemp)
    cp $orig_file $temp_file

    command nvim $orig_file

    if test $status -eq 0
        set -l IFS
        set patch_output (diff -u $temp_file $orig_file)
        if test -n "$patch_output"
            echo "# Original command: nvim $orig_file" >> $OUT_FILE
            echo echo "\'(string replace -a "\'" "\\\'" "$patch_output")\'" "|" patch $orig_file >> $OUT_FILE
            echo "" >> $OUT_FILE
        end
    end

    rm $temp_file
end

# Simulate preexec functionality using fish_postexec and checking command history
set skip_first 0
function fish_postexec --on-event fish_prompt
    echo "[Logging]"
    if test "$skip_first" \!= "1"
        set skip_first 1
        return
    end

    # Get the last command from history
    set last_command $history[1]
    
    # Ignore commands that start with a space
    if string match -qr "^\s" -- "$last_command"
        return
    end

    # Split the command into words
    set words (string split " " $last_command)
    set first_word $words[1]

    echo "# "(date +"%Y-%m-%d %H:%M:%S") >> $OUT_FILE
    # Check if first word is `nvim` or `v` and there is exactly one argument
    if test \( "$first_word" = nvim -o "$first_word" = v \) -a (count $words) -eq 2
        # The above nvim function handles it
        return
    end

    # echo "Saving $last_command"
    echo "$last_command" >> $OUT_FILE
    echo "" >> $OUT_FILE
end

# Notify user about logging
echo "Logging commands to $OUT_FILE"
echo "Exit shell to stop logging"
'

echo "$init_cmd"

# Start a new Fish shell with the initialization command
fish -C "$init_cmd" -i

